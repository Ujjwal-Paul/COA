-- Simple half subtractor design
library IEEE;
use IEEE.std_logic_1164.all;

entity half_subtractor is
port(
  a: in std_logic;
  b: in std_logic;
  diff: out std_logic;
  borrow: out std_logic);
end half_subtractor;

architecture rtl of half_subtractor is
begin
  process(a, b) is
  begin
    diff <= a xor b;
    borrow <= (not a) and b;
  end process;
end rtl;










-- Testbench for half subtractor
library IEEE;
use IEEE.std_logic_1164.all;
 
entity testbench is
-- empty
end testbench; 

architecture tb of testbench is

-- DUT component
component half_subtractor is
port(
  a: in std_logic;
  b: in std_logic;
  diff: out std_logic;
  borrow: out std_logic);
end component;

signal a_in, b_in, diff_out, borrow_out: std_logic;

begin

  -- Connect DUT
  DUT: half_subtractor port map(a_in, b_in, diff_out, borrow_out);

  process
  begin
    a_in <= '0';
    b_in <= '0';
    wait for 1 ns;
    assert(diff_out='0') report "Fail 0/0" severity error;
    assert(borrow_out='0') report "Fail 0/0" severity error;
  
    a_in <= '0';
    b_in <= '1';
    wait for 1 ns;
    assert(diff_out='1') report "Fail 0/1" severity error;
    assert(borrow_out='1') report "Fail 0/1" severity error;

    a_in <= '1';
    b_in <= '0';
    wait for 1 ns;
    assert(diff_out='1') report "Fail 1/0" severity error;
    assert(borrow_out='0') report "Fail 1/0" severity error;

    a_in <= '1';
    b_in <= '1';
    wait for 1 ns;
    assert(diff_out='0') report "Fail 1/1" severity error;
    assert(borrow_out='0') report "Fail 1/1" severity error;
    
    -- Clear inputs
    a_in <= '0';
    b_in <= '0';

    assert false report "Test done." severity note;
    wait;
  end process;
end tb;
